/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

@font-face {
  font-family: 'Open Sans';
  src: url("/assets/fonts/OpenSansLight/OpenSans-Light.eot");
  src: url("/assets/fonts/OpenSansLight/OpenSans-Light.eot?#iefix") format("embedded-opentype"), url("/assets/fonts/OpenSansLight/OpenSans-Light.woff") format("woff"), url("/assets/fonts/OpenSansLight/OpenSans-Light.ttf") format("truetype"), url("/assets/fonts/OpenSansLight/OpenSans-Light.svg#OpenSans-Light") format("svg");
  font-weight: light;
  font-style: normal; }

:root {
  font-size: 16px;
  font-family: 'Open Sans'; }

.navbar {
  height: 20px;
  width: 20px;
  background: black;
  display: block; }

body {
  background: #f6f6f6; }
  body #container {
    margin: 0 auto;
    max-width: 1100px; }
    @media screen and (max-width: 765px) {
      body #container {
        height: 100vh; } }
    body #container #logo {
      margin: 50px auto;
      height: 80px;
      width: 80px; }
      @media screen and (max-width: 1024px) {
        body #container #logo {
          display: none; } }
      body #container #logo img {
        position: center center;
        width: 100%; }
    body #container label {
      display: none;
      z-index: 100;
      height: 30px;
      width: 40px;
      position: absolute;
      left: 22px;
      top: 22px; }
      body #container label:focus {
        outline: none; }
      @media screen and (max-width: 765px) {
        body #container label {
          display: inline-block; } }
      body #container label span {
        width: 100%;
        border-radius: 1px;
        height: 2px;
        background: rgba(0, 0, 0, 0.8);
        display: block; }
        body #container label span:nth-child(2) {
          margin-top: 12px; }
        body #container label span:last-child {
          margin-top: 12px; }
    body #container hr {
      margin: 0;
      border: 0;
      border-top: 1px solid #cdcdcd; }
      @media screen and (max-width: 765px) {
        body #container hr {
          display: none; } }
    body #container #red_box {
      height: 550px;
      background: #ff6e73;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      -webkit-flex-wrap: wrap;
          -ms-flex-wrap: wrap;
              flex-wrap: wrap;
      -webkit-justify-content: center;
          -ms-flex-pack: center;
              justify-content: center;
      -webkit-align-items: center;
          -ms-flex-align: center;
              align-items: center; }
      @media screen and (max-width: 765px) {
        body #container #red_box {
          height: calc(100vh - 75px); } }
      body #container #red_box #content h1 {
        color: white;
        font-size: 3rem;
        text-transform: uppercase;
        font-weight: 100;
        letter-spacing: .65rem;
        text-align: center; }
        @media screen and (max-width: 765px) {
          body #container #red_box #content h1 {
            font-size: 2rem; } }
        @media screen and (max-width: 500px) {
          body #container #red_box #content h1 {
            font-size: 1rem; } }

#container > input {
  display: none;
  position: absolute; }
  #container > input:checked + nav {
    height: 437px; }
    #container > input:checked + nav ul {
      position: absolute;
      width: 100%;
      height: calc(100% - 74px);
      bottom: 0;
      left: 0;
      right: 0;
      -webkit-flex-wrap: wrap;
          -ms-flex-wrap: wrap;
              flex-wrap: wrap; }

nav {
  transition: .8s ease-in-out;
  height: 74px;
  position: relative;
  overflow: hidden; }
  nav ul {
    padding: 0;
    margin: 0 auto;
    width: 600px;
    height: 100%;
    list-style: none;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-align-items: center;
        -ms-flex-align: center;
            align-items: center;
    -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
            justify-content: space-between;
    position: relative;
    text-transform: uppercase; }
    @media screen and (max-width: 1024px) {
      nav ul {
        width: 95%; } }
    @media screen and (max-width: 765px) {
      nav ul {
        border-top: 1px solid #cdcdcd;
        position: absolute;
        width: 100%;
        top: 75px;
        bottom: 0;
        left: 0;
        right: 0;
        display: block; }
        nav ul li {
          width: 100%;
          height: 60px; }
          nav ul li a {
            width: 100%;
            height: 100%;
            line-height: 60px; }
          nav ul li a.active:before {
            visibility: hidden; } }
    nav ul li {
      text-align: center; }
      nav ul li a {
        display: inline-block;
        font-size: .8rem;
        color: black;
        text-decoration: none;
        letter-spacing: .1rem;
        font-weight: 100;
        position: relative; }
      nav ul li a:before {
        content: " ";
        position: absolute;
        width: 100%;
        bottom: -1px;
        left: 0px;
        height: .5px;
        background-color: black;
        transition: .2s ease-in-out;
        -webkit-transform: scaleX(0);
                transform: scaleX(0);
        visibility: hidden; }
        @media screen and (max-width: 765px) {
          nav ul li a:before {
            display: none; } }
      nav ul li a:hover:before, nav ul li a.active:before {
        visibility: visible;
        -webkit-transform: scaleX(1);
                transform: scaleX(1); }

/*# sourceMappingURL=data:application/json;base64, */
